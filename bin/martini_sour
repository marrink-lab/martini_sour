#!/usr/bin/env python3

# Copyright 2020 University of Groningen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Perform the parsing and input redirect for the
different subcommands. This is the main executable.
"""
import os
import logging
import argparse
from pathlib import Path
import numpy as np
from vermouth.log_helpers import (StyleAdapter, BipolarFormatter,
                                  CountingHandler, TypeAdapter,
                                  ignore_warnings_and_count,)

import martini_sour
from martini_sour import conv_itp, conv_coords, analyze, titrate

# Implement Logger
LOGGER = TypeAdapter(logging.getLogger('martini_sour'))
PRETTY_FORMATTER = logging.Formatter(fmt='{levelname:} - {type} - {message}',
                                     style='{')
DETAILED_FORMATTER = logging.Formatter(fmt='{levelname:} - {type} - {name} - {message}',
                                       style='{')
COUNTER = CountingHandler()

# Control above what level message we want to count
COUNTER.setLevel(logging.WARNING)

CONSOLE_HANDLER = logging.StreamHandler()
FORMATTER = BipolarFormatter(DETAILED_FORMATTER,
                             PRETTY_FORMATTER,
                             logging.DEBUG,
                             logger=LOGGER)

CONSOLE_HANDLER.setFormatter(FORMATTER)
LOGGER.addHandler(CONSOLE_HANDLER)
LOGGER.addHandler(COUNTER)

LOGGER = StyleAdapter(LOGGER)

VERSION = 'martini_sour version {}'.format(martini_sour.__version__)


def main():
    """
    Parses commandline arguments and call relevant sub_programs.
    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument('-V', '--version', action='version', version=VERSION)
    subparsers = parser.add_subparsers()

    # List of Subparsers for the different tools
    parser_conv_itp = subparsers.add_parser('conv_itp')
    parser_conv_coords = subparsers.add_parser('conv_coords')
    parser_analyze = subparsers.add_parser('analyze_traj')
    parser_titrate = subparsers.add_parser('titrate')

    # =============================================================================
    # Input Arguments for the itp generation tool
    # =============================================================================

    parser_conv_itp.add_argument('-v', dest='verbosity', action='count',
                                 help='Enable debug logging output. Can be given '
                                 'multiple times.', default=0)

    file_group = parser_conv_itp.add_argument_group('Input and output options')
    file_group.add_argument('-f', dest='inpath', required=False, type=Path,
                            help='Input file (ITP)', nargs="*")
    file_group.add_argument('-o', dest='outpath', type=Path,
                            help='Output ITP (ITP)')

    titrate_group = parser_conv_itp.add_argument_group('Titratable Bead definitions.')
    titrate_group.add_argument('-bases', dest='bases', type=str, nargs='+',
                               help='An enumeration of residues to convert to bases.')
    titrate_group.add_argument('-acids', dest='bases', type=str, nargs='+',
                               help='An enumeration of residues to convert to acids.')
    titrate_group.add_argument('-auto', dest='auto', type=bool, default=False,
                               help='Identify acids/bases automatically from known building ''blocks.')

    parser_conv_itp.set_defaults(func=conv_itp)

    # ============================================================================
    #           Input Arguments for the coordinate generation tool
    # ============================================================================

    parser_conv_coords.add_argument('-v', dest='verbosity', action='count',
                                    help='Enable debug logging output. Can be given '
                                    'multiple times.', default=0)

    file_group = parser_conv_coords.add_argument_group('Convert regular to titratable beads.')
    file_group.add_argument('-o', dest='out_file', type=Path,
                            help='output GRO (.gro)')
    file_group.add_argument('-f', dest='input_file', type=Path,
                            help='input file (.gro)', default=None)

    titrate_group = parser_conv_coords.add_argument_group('Titratable Bead Selections '
                                                          '(can enter multiple of each)')
    titrate_group.add_argument('-bead', dest='bead_type', action='append',
                               choices=martini_sour.src.conv_coords.bead_type_dict.keys(),
                               help='type of the selected beads')
    titrate_group.add_argument('-sel', dest='sel', action='append', help='selection command '
                               '(see MDAnalysis) for the chosen bead type(s)')

#    titrate_group.add_argument('-bases', dest='bases', type=str, nargs='+',
#                           help='An enumeration of residues to convert to bases.')
#    titrate_group.add_argument('-acids', dest='bases', type=str, nargs='+',
#                           help='An enumeration of residues to convert to acids.')
#    titrate_group.add_argument('-auto', dest='auto', type=bool, default=False,
#                           help='Identify acids/bases automatically from known building blocks.')

    parser_conv_coords.set_defaults(func=conv_coords)

    # ============================================================================
    #           Input Arguments for initializing the titration
    # ============================================================================

    parser_titrate.add_argument('-v', dest='verbosity', action='count',
                                help='Enable debug logging output. Can be given '
                                'multiple times.', default=0)

    parser_titrate.add_argument('-pH', dest='ph', type=str,
                                help='pH value range. Format: start:end:increment')
    parser_titrate.add_argument('-mdp', dest='mdp_file', action='append',
                                help='Name(s) of mdp file(s)). Can be given multiple times.')
    parser_titrate.add_argument('-p', dest='top_file', type=str, default='system.top',
                                help='Name of the titratable topology (.top) file')
    parser_titrate.add_argument('-c', dest='gro_file', type=str, default='start.gro',
                                help='Name of the titratable coordinate (.gro) file')
    parser_titrate.add_argument('-o', dest='out_file', type=str, default='run.sh',
                                help='Name of the output script')

    parser_titrate.set_defaults(func=titrate)

    # ============================================================================
    #           Input Arguments for the analysis tool
    # ============================================================================

    parser_analyze.add_argument('-name', required=True, type=str, dest="name",
                                help="name of the final molecule")
    parser_analyze.add_argument('-v', dest='verbosity', action='count',
                                help='Enable debug logging output. Can be given '
                                'multiple times.', default=0)
    parser_analyze.add_argument('-count', dest='scheme', type=str, help='counting scheme',
                                default="legacy")

    file_group = parser_analyze.add_argument_group('Input and output files')
    file_group.add_argument('-f', dest='traj', required=False, type=Path,
                            help='force-field files (.ff|.itp)', nargs=1)
    file_group.add_argument('-s', dest='tpr', required=False, type=Path,
                            help='force-field files (.ff|.itp)', nargs=1)
    file_group.add_argument('-o', dest='out', type=Path,
                            help='output file (.json)', required=True)

    bead_group = parser_analyze.add_argument_group('Titratable bead selections')
    bead_group.add_argument('-ref', dest='ref', required=True, type=str,
                            help='MDAnalysis selection string.')
    bead_group.add_argument('-sel', dest='sel', required=True, type=str,
                            help='MDAnalysis selection string.')

    traj_group = parser_analyze.add_argument_group('Trajectory Options')
    traj_group.add_argument('-b', dest='start', type=int, help='first frame (int)', default=0)
    traj_group.add_argument('-e', dest='end', type=int, help='last frame (int)', default=-1)

    parser_analyze.set_defaults(func=analyze)

    # ============================================================================
    # Deal with queries of the polyply library
    # ============================================================================

    args = parser.parse_args()

    loglevels = {0: logging.INFO, 1: logging.DEBUG, 2: 5}
    LOGGER.setLevel(loglevels[args.verbosity])

    args.func(args)


if __name__ == '__main__':
    main()
